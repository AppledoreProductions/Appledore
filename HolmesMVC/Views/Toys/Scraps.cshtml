@using HolmesMVC.Models.ViewModels
@model ScrapsView

@{
    ViewBag.Title = "Scraps";
}

    <h2>@ViewBag.Title</h2>

<h2>d3.js Force Directed</h2>
<!-- Credit to http://bl.ocks.org/mbostock/4062045 -->

<style>

    g.link line {
      stroke: #999;
      stroke-opacity: 0.3;
    }

    g.gnode rect.node {
      opacity: 0;
    }

    g.gnode text.nodelabel {
        font-size: 10px;
        font-weight: 700;
        fill: forestgreen;
        text-anchor: middle;
    }

    g.link text.linklabel {
        font-size: 7px;
        font-weight: 700;
        fill: red;
        text-anchor: middle;
    }

</style>

<svg width="960" height="600"></svg>

@section Scripts {
    <script src="https://d3js.org/d3.v4.min.js"></script>
    
<script>
    $(document).ready(function () {

        var myJson = '@Html.Raw(Model.HolmesLinks)';

        var graph = JSON.parse(myJson);

        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        var simulation = d3.forceSimulation()
            .force("link", d3.forceLink()
                .id(function (d) { return d.id; })
                .distance(function (d) { return 10 * (d.value * d.value); }))
            .force("charge", d3.forceManyBody())
            .force("center", d3.forceCenter(width / 2, height / 2));

        var drawGraph = function (graph) {

            var link = svg.selectAll(".link")
                .data(graph.links)
                .enter()
                .append("g")
                .attr("class", "link")
                .append("line")
                .attr("class", "link-line")
                .attr("stroke-width", function (d) { return 1; });

            var linkLabel = svg.selectAll(".link")
                .append("text")
                .attr("class", "linklabel")
                .text(function (d) { return d.value });

            var gnodes = svg.selectAll('g.gnode')
                .data(graph.nodes)
                .enter()
                .append('g')
                .classed('gnode', true)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            gnodes.append("rect")
                .attr("class", "node")
                .attr("width", 1)
                .attr("height", 1)
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            gnodes.append("text")
                .attr("class", "nodelabel")
                .text(function (d) { return d.name; })
                .call(d3.drag()
                    .on("start", dragstarted)
                    .on("drag", dragged)
                    .on("end", dragended));

            function ticked() {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                linkLabel
                    .attr("x", function (d) { return (d.source.x + d.target.x) / 2; })
                    .attr("y", function (d) { return (d.source.y + d.target.y) / 2; });

                gnodes.attr("transform", function (d) {
                    return 'translate(' + [d.x, d.y] + ')';
                });
            }

            simulation
                .nodes(graph.nodes)
                .on("tick", ticked);

            simulation.force("link")
                .links(graph.links);
        };

        function dragstarted(d) {
            if (!d3.event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(d) {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
        }

        function dragended(d) {
            if (!d3.event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }

        drawGraph(graph);
    });

</script>
}